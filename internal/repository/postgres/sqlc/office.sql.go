// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: office.sql

package db

import (
	"context"
)

const addOffice = `-- name: AddOffice :one
INSERT INTO office (
  parent_id, type, name
) VALUES (
  $1, $2, $3
)
RETURNING id, parent_id, type, name, state, created_at, deleted_at
`

type AddOfficeParams struct {
	ParentID int64      `db:"parent_id"`
	Type     OfficeType `db:"type"`
	Name     string     `db:"name"`
}

func (q *Queries) AddOffice(ctx context.Context, arg AddOfficeParams) (Office, error) {
	row := q.db.QueryRowContext(ctx, addOffice, arg.ParentID, arg.Type, arg.Name)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.State,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createHQOffice = `-- name: CreateHQOffice :one
INSERT INTO office (
  type, name, parent_id
) VALUES (
  'hq', $1, lastval()
)
RETURNING id, parent_id, type, name, state, created_at, deleted_at
`

func (q *Queries) CreateHQOffice(ctx context.Context, name string) (Office, error) {
	row := q.db.QueryRowContext(ctx, createHQOffice, name)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.State,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOffice = `-- name: GetOffice :one
SELECT id, parent_id, type, name, state, created_at, deleted_at FROM office
WHERE id = $1 and deleted_at is null
LIMIT 1
`

func (q *Queries) GetOffice(ctx context.Context, id int64) (Office, error) {
	row := q.db.QueryRowContext(ctx, getOffice, id)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.State,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listOffice = `-- name: ListOffice :many
SELECT id, parent_id, type, name, state, created_at, deleted_at FROM office
WHERE deleted_at is null and type = $1
ORDER BY id DESC
LIMIT $2
OFFSET $3
`

type ListOfficeParams struct {
	Type   OfficeType `db:"type"`
	Limit  int32      `db:"limit"`
	Offset int32      `db:"offset"`
}

func (q *Queries) ListOffice(ctx context.Context, arg ListOfficeParams) ([]Office, error) {
	rows, err := q.db.QueryContext(ctx, listOffice, arg.Type, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Office{}
	for rows.Next() {
		var i Office
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Type,
			&i.Name,
			&i.State,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOffice = `-- name: UpdateOffice :one
UPDATE office
  set name = $2
WHERE id = $1 and deleted_at is null
RETURNING id, parent_id, type, name, state, created_at, deleted_at
`

type UpdateOfficeParams struct {
	ID   int64  `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) UpdateOffice(ctx context.Context, arg UpdateOfficeParams) (Office, error) {
	row := q.db.QueryRowContext(ctx, updateOffice, arg.ID, arg.Name)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.State,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
