// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: office.sql

package db

import (
	"context"
	"database/sql"
)

const createOffice = `-- name: CreateOffice :one
INSERT INTO office (
  id, parent_id, type, name
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, parent_id, type, name, state, created_at, deleted_at
`

type CreateOfficeParams struct {
	ID       int64         `db:"id"`
	ParentID sql.NullInt64 `db:"parent_id"`
	Type     OfficeType    `db:"type"`
	Name     string        `db:"name"`
}

func (q *Queries) CreateOffice(ctx context.Context, arg CreateOfficeParams) (Office, error) {
	row := q.db.QueryRowContext(ctx, createOffice,
		arg.ID,
		arg.ParentID,
		arg.Type,
		arg.Name,
	)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.State,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOffice = `-- name: GetOffice :one
SELECT id, parent_id, type, name, state, created_at, deleted_at FROM office
WHERE id = $1 and deleted_at is null
LIMIT 1
`

func (q *Queries) GetOffice(ctx context.Context, id int64) (Office, error) {
	row := q.db.QueryRowContext(ctx, getOffice, id)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.State,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listOffice = `-- name: ListOffice :many
SELECT id, parent_id, type, name, state, created_at, deleted_at FROM office
WHERE deleted_at is null
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type ListOfficeParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListOffice(ctx context.Context, arg ListOfficeParams) ([]Office, error) {
	rows, err := q.db.QueryContext(ctx, listOffice, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Office
	for rows.Next() {
		var i Office
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Type,
			&i.Name,
			&i.State,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOffice = `-- name: UpdateOffice :one
UPDATE office
  set name = $2,
  type = $3
WHERE id = $1 and deleted_at is null
RETURNING id, parent_id, type, name, state, created_at, deleted_at
`

type UpdateOfficeParams struct {
	ID   int64      `db:"id"`
	Name string     `db:"name"`
	Type OfficeType `db:"type"`
}

func (q *Queries) UpdateOffice(ctx context.Context, arg UpdateOfficeParams) (Office, error) {
	row := q.db.QueryRowContext(ctx, updateOffice, arg.ID, arg.Name, arg.Type)
	var i Office
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.State,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
