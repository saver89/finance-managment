// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/saver89/finance-management/internal/repository/postgres/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlc "github.com/saver89/finance-management/internal/repository/postgres/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAccountBalance mocks base method.
func (m *MockStore) AddAccountBalance(arg0 context.Context, arg1 sqlc.AddAccountBalanceParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountBalance indicates an expected call of AddAccountBalance.
func (mr *MockStoreMockRecorder) AddAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountBalance", reflect.TypeOf((*MockStore)(nil).AddAccountBalance), arg0, arg1)
}

// AddOffice mocks base method.
func (m *MockStore) AddOffice(arg0 context.Context, arg1 sqlc.AddOfficeParams) (sqlc.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOffice", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOffice indicates an expected call of AddOffice.
func (mr *MockStoreMockRecorder) AddOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOffice", reflect.TypeOf((*MockStore)(nil).AddOffice), arg0, arg1)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 sqlc.CreateAccountParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateCurrency mocks base method.
func (m *MockStore) CreateCurrency(arg0 context.Context, arg1 sqlc.CreateCurrencyParams) (sqlc.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurrency", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCurrency indicates an expected call of CreateCurrency.
func (mr *MockStoreMockRecorder) CreateCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurrency", reflect.TypeOf((*MockStore)(nil).CreateCurrency), arg0, arg1)
}

// CreateHQOffice mocks base method.
func (m *MockStore) CreateHQOffice(arg0 context.Context, arg1 string) (sqlc.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHQOffice", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHQOffice indicates an expected call of CreateHQOffice.
func (mr *MockStoreMockRecorder) CreateHQOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHQOffice", reflect.TypeOf((*MockStore)(nil).CreateHQOffice), arg0, arg1)
}

// CreateOfficeCurrency mocks base method.
func (m *MockStore) CreateOfficeCurrency(arg0 context.Context, arg1 sqlc.CreateOfficeCurrencyParams) (sqlc.OfficeCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOfficeCurrency", arg0, arg1)
	ret0, _ := ret[0].(sqlc.OfficeCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOfficeCurrency indicates an expected call of CreateOfficeCurrency.
func (mr *MockStoreMockRecorder) CreateOfficeCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOfficeCurrency", reflect.TypeOf((*MockStore)(nil).CreateOfficeCurrency), arg0, arg1)
}

// CreateOfficeCurrencyRate mocks base method.
func (m *MockStore) CreateOfficeCurrencyRate(arg0 context.Context, arg1 sqlc.CreateOfficeCurrencyRateParams) (sqlc.OfficeCurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOfficeCurrencyRate", arg0, arg1)
	ret0, _ := ret[0].(sqlc.OfficeCurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOfficeCurrencyRate indicates an expected call of CreateOfficeCurrencyRate.
func (mr *MockStoreMockRecorder) CreateOfficeCurrencyRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOfficeCurrencyRate", reflect.TypeOf((*MockStore)(nil).CreateOfficeCurrencyRate), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockStore) CreateTransaction(arg0 context.Context, arg1 sqlc.CreateTransactionParams) (sqlc.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStoreMockRecorder) CreateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 sqlc.CreateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockStore) DeleteAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockStoreMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), arg0, arg1)
}

// DeleteCurrency mocks base method.
func (m *MockStore) DeleteCurrency(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCurrency", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCurrency indicates an expected call of DeleteCurrency.
func (mr *MockStoreMockRecorder) DeleteCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCurrency", reflect.TypeOf((*MockStore)(nil).DeleteCurrency), arg0, arg1)
}

// DeleteOfficeCurrency mocks base method.
func (m *MockStore) DeleteOfficeCurrency(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfficeCurrency", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfficeCurrency indicates an expected call of DeleteOfficeCurrency.
func (mr *MockStoreMockRecorder) DeleteOfficeCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfficeCurrency", reflect.TypeOf((*MockStore)(nil).DeleteOfficeCurrency), arg0, arg1)
}

// DeleteOfficeCurrencyRate mocks base method.
func (m *MockStore) DeleteOfficeCurrencyRate(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfficeCurrencyRate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfficeCurrencyRate indicates an expected call of DeleteOfficeCurrencyRate.
func (mr *MockStoreMockRecorder) DeleteOfficeCurrencyRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfficeCurrencyRate", reflect.TypeOf((*MockStore)(nil).DeleteOfficeCurrencyRate), arg0, arg1)
}

// DeleteTransaction mocks base method.
func (m *MockStore) DeleteTransaction(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockStoreMockRecorder) DeleteTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockStore)(nil).DeleteTransaction), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockStore) GetAccount(arg0 context.Context, arg1 int64) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStoreMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStore)(nil).GetAccount), arg0, arg1)
}

// GetAccountForUpdate mocks base method.
func (m *MockStore) GetAccountForUpdate(arg0 context.Context, arg1 int64) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountForUpdate", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountForUpdate indicates an expected call of GetAccountForUpdate.
func (mr *MockStoreMockRecorder) GetAccountForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountForUpdate", reflect.TypeOf((*MockStore)(nil).GetAccountForUpdate), arg0, arg1)
}

// GetCurrency mocks base method.
func (m *MockStore) GetCurrency(arg0 context.Context, arg1 int64) (sqlc.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockStoreMockRecorder) GetCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockStore)(nil).GetCurrency), arg0, arg1)
}

// GetOffice mocks base method.
func (m *MockStore) GetOffice(arg0 context.Context, arg1 int64) (sqlc.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffice", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffice indicates an expected call of GetOffice.
func (mr *MockStoreMockRecorder) GetOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffice", reflect.TypeOf((*MockStore)(nil).GetOffice), arg0, arg1)
}

// GetOfficeCurrency mocks base method.
func (m *MockStore) GetOfficeCurrency(arg0 context.Context, arg1 int64) (sqlc.OfficeCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeCurrency", arg0, arg1)
	ret0, _ := ret[0].(sqlc.OfficeCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeCurrency indicates an expected call of GetOfficeCurrency.
func (mr *MockStoreMockRecorder) GetOfficeCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeCurrency", reflect.TypeOf((*MockStore)(nil).GetOfficeCurrency), arg0, arg1)
}

// GetOfficeCurrencyRate mocks base method.
func (m *MockStore) GetOfficeCurrencyRate(arg0 context.Context, arg1 int64) (sqlc.OfficeCurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeCurrencyRate", arg0, arg1)
	ret0, _ := ret[0].(sqlc.OfficeCurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeCurrencyRate indicates an expected call of GetOfficeCurrencyRate.
func (mr *MockStoreMockRecorder) GetOfficeCurrencyRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeCurrencyRate", reflect.TypeOf((*MockStore)(nil).GetOfficeCurrencyRate), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockStore) GetTransaction(arg0 context.Context, arg1 int64) (sqlc.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockStoreMockRecorder) GetTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockStore)(nil).GetTransaction), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListAccount mocks base method.
func (m *MockStore) ListAccount(arg0 context.Context, arg1 sqlc.ListAccountParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccount", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccount indicates an expected call of ListAccount.
func (mr *MockStoreMockRecorder) ListAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccount", reflect.TypeOf((*MockStore)(nil).ListAccount), arg0, arg1)
}

// ListCurrency mocks base method.
func (m *MockStore) ListCurrency(arg0 context.Context, arg1 sqlc.ListCurrencyParams) ([]sqlc.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrency", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrency indicates an expected call of ListCurrency.
func (mr *MockStoreMockRecorder) ListCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrency", reflect.TypeOf((*MockStore)(nil).ListCurrency), arg0, arg1)
}

// ListOffice mocks base method.
func (m *MockStore) ListOffice(arg0 context.Context, arg1 sqlc.ListOfficeParams) ([]sqlc.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOffice", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOffice indicates an expected call of ListOffice.
func (mr *MockStoreMockRecorder) ListOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOffice", reflect.TypeOf((*MockStore)(nil).ListOffice), arg0, arg1)
}

// ListOfficeCurrency mocks base method.
func (m *MockStore) ListOfficeCurrency(arg0 context.Context, arg1 int64) ([]sqlc.OfficeCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfficeCurrency", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.OfficeCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfficeCurrency indicates an expected call of ListOfficeCurrency.
func (mr *MockStoreMockRecorder) ListOfficeCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfficeCurrency", reflect.TypeOf((*MockStore)(nil).ListOfficeCurrency), arg0, arg1)
}

// ListOfficeCurrencyRate mocks base method.
func (m *MockStore) ListOfficeCurrencyRate(arg0 context.Context, arg1 sqlc.ListOfficeCurrencyRateParams) ([]sqlc.OfficeCurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfficeCurrencyRate", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.OfficeCurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfficeCurrencyRate indicates an expected call of ListOfficeCurrencyRate.
func (mr *MockStoreMockRecorder) ListOfficeCurrencyRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfficeCurrencyRate", reflect.TypeOf((*MockStore)(nil).ListOfficeCurrencyRate), arg0, arg1)
}

// ListUser mocks base method.
func (m *MockStore) ListUser(arg0 context.Context, arg1 sqlc.ListUserParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockStoreMockRecorder) ListUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockStore)(nil).ListUser), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 sqlc.TransferTxParam) (sqlc.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(sqlc.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockStore) UpdateAccount(arg0 context.Context, arg1 sqlc.UpdateAccountParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockStoreMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), arg0, arg1)
}

// UpdateAccountBalance mocks base method.
func (m *MockStore) UpdateAccountBalance(arg0 context.Context, arg1 sqlc.UpdateAccountBalanceParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountBalance indicates an expected call of UpdateAccountBalance.
func (mr *MockStoreMockRecorder) UpdateAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalance", reflect.TypeOf((*MockStore)(nil).UpdateAccountBalance), arg0, arg1)
}

// UpdateCurrency mocks base method.
func (m *MockStore) UpdateCurrency(arg0 context.Context, arg1 sqlc.UpdateCurrencyParams) (sqlc.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrency", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCurrency indicates an expected call of UpdateCurrency.
func (mr *MockStoreMockRecorder) UpdateCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrency", reflect.TypeOf((*MockStore)(nil).UpdateCurrency), arg0, arg1)
}

// UpdateOffice mocks base method.
func (m *MockStore) UpdateOffice(arg0 context.Context, arg1 sqlc.UpdateOfficeParams) (sqlc.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffice", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOffice indicates an expected call of UpdateOffice.
func (mr *MockStoreMockRecorder) UpdateOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffice", reflect.TypeOf((*MockStore)(nil).UpdateOffice), arg0, arg1)
}

// UpdateOfficeCurrencyRate mocks base method.
func (m *MockStore) UpdateOfficeCurrencyRate(arg0 context.Context, arg1 sqlc.UpdateOfficeCurrencyRateParams) (sqlc.OfficeCurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOfficeCurrencyRate", arg0, arg1)
	ret0, _ := ret[0].(sqlc.OfficeCurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOfficeCurrencyRate indicates an expected call of UpdateOfficeCurrencyRate.
func (mr *MockStoreMockRecorder) UpdateOfficeCurrencyRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOfficeCurrencyRate", reflect.TypeOf((*MockStore)(nil).UpdateOfficeCurrencyRate), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 sqlc.UpdateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
