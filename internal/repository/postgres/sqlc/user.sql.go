// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
insert into "user" (
  office_id, username, password_hash, first_name, last_name, 
  middle_name, birthday, email, phone, state
)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, 'active')
returning id, office_id, username, password_hash, first_name, last_name, middle_name, birthday, email, phone, created_by, state, created_at, deleted_at
`

type CreateUserParams struct {
	OfficeID     int64          `db:"office_id"`
	Username     string         `db:"username"`
	PasswordHash string         `db:"password_hash"`
	FirstName    sql.NullString `db:"first_name"`
	LastName     sql.NullString `db:"last_name"`
	MiddleName   sql.NullString `db:"middle_name"`
	Birthday     sql.NullTime   `db:"birthday"`
	Email        sql.NullString `db:"email"`
	Phone        sql.NullString `db:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.OfficeID,
		arg.Username,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.Birthday,
		arg.Email,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OfficeID,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Birthday,
		&i.Email,
		&i.Phone,
		&i.CreatedBy,
		&i.State,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
update "user" set deleted_at = now() where "id" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
select id, office_id, username, password_hash, first_name, last_name, middle_name, birthday, email, phone, created_by, state, created_at, deleted_at from "user" where "id" = $1 and "deleted_at" is null
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OfficeID,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Birthday,
		&i.Email,
		&i.Phone,
		&i.CreatedBy,
		&i.State,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
select id, office_id, username, password_hash, first_name, last_name, middle_name, birthday, email, phone, created_by, state, created_at, deleted_at from "user" where "deleted_at" is null and office_id = $3
LIMIT $1
OFFSET $2
`

type ListUserParams struct {
	Limit    int32 `db:"limit"`
	Offset   int32 `db:"offset"`
	OfficeID int64 `db:"office_id"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser, arg.Limit, arg.Offset, arg.OfficeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OfficeID,
			&i.Username,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.MiddleName,
			&i.Birthday,
			&i.Email,
			&i.Phone,
			&i.CreatedBy,
			&i.State,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
update "user" set password_hash = $1, 
  first_name = $2, last_name = $3, middle_name = $4, birthday = $5, 
  email = $6, phone = $7
where "id" = $8 and "deleted_at" is null
returning id, office_id, username, password_hash, first_name, last_name, middle_name, birthday, email, phone, created_by, state, created_at, deleted_at
`

type UpdateUserParams struct {
	PasswordHash string         `db:"password_hash"`
	FirstName    sql.NullString `db:"first_name"`
	LastName     sql.NullString `db:"last_name"`
	MiddleName   sql.NullString `db:"middle_name"`
	Birthday     sql.NullTime   `db:"birthday"`
	Email        sql.NullString `db:"email"`
	Phone        sql.NullString `db:"phone"`
	ID           int64          `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.Birthday,
		arg.Email,
		arg.Phone,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OfficeID,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Birthday,
		&i.Email,
		&i.Phone,
		&i.CreatedBy,
		&i.State,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
