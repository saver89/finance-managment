// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type AccountState string

const (
	AccountStateActive   AccountState = "active"
	AccountStateDisabled AccountState = "disabled"
)

func (e *AccountState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountState(s)
	case string:
		*e = AccountState(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountState: %T", src)
	}
	return nil
}

type NullAccountState struct {
	AccountState AccountState
	Valid        bool // Valid is true if AccountState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountState) Scan(value interface{}) error {
	if value == nil {
		ns.AccountState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountState), nil
}

type CurrencyState string

const (
	CurrencyStateActive   CurrencyState = "active"
	CurrencyStateDisabled CurrencyState = "disabled"
)

func (e *CurrencyState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CurrencyState(s)
	case string:
		*e = CurrencyState(s)
	default:
		return fmt.Errorf("unsupported scan type for CurrencyState: %T", src)
	}
	return nil
}

type NullCurrencyState struct {
	CurrencyState CurrencyState
	Valid         bool // Valid is true if CurrencyState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrencyState) Scan(value interface{}) error {
	if value == nil {
		ns.CurrencyState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CurrencyState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrencyState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CurrencyState), nil
}

type OfficeCurrencyType string

const (
	OfficeCurrencyTypeRetail OfficeCurrencyType = "retail"
	OfficeCurrencyTypeSupply OfficeCurrencyType = "supply"
)

func (e *OfficeCurrencyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OfficeCurrencyType(s)
	case string:
		*e = OfficeCurrencyType(s)
	default:
		return fmt.Errorf("unsupported scan type for OfficeCurrencyType: %T", src)
	}
	return nil
}

type NullOfficeCurrencyType struct {
	OfficeCurrencyType OfficeCurrencyType
	Valid              bool // Valid is true if OfficeCurrencyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOfficeCurrencyType) Scan(value interface{}) error {
	if value == nil {
		ns.OfficeCurrencyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OfficeCurrencyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOfficeCurrencyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OfficeCurrencyType), nil
}

type OfficeState string

const (
	OfficeStateActive  OfficeState = "active"
	OfficeStateBlocked OfficeState = "blocked"
)

func (e *OfficeState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OfficeState(s)
	case string:
		*e = OfficeState(s)
	default:
		return fmt.Errorf("unsupported scan type for OfficeState: %T", src)
	}
	return nil
}

type NullOfficeState struct {
	OfficeState OfficeState
	Valid       bool // Valid is true if OfficeState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOfficeState) Scan(value interface{}) error {
	if value == nil {
		ns.OfficeState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OfficeState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOfficeState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OfficeState), nil
}

type OfficeType string

const (
	OfficeTypeHq        OfficeType = "hq"
	OfficeTypeWarehouse OfficeType = "warehouse"
	OfficeTypeStore     OfficeType = "store"
)

func (e *OfficeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OfficeType(s)
	case string:
		*e = OfficeType(s)
	default:
		return fmt.Errorf("unsupported scan type for OfficeType: %T", src)
	}
	return nil
}

type NullOfficeType struct {
	OfficeType OfficeType
	Valid      bool // Valid is true if OfficeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOfficeType) Scan(value interface{}) error {
	if value == nil {
		ns.OfficeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OfficeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOfficeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OfficeType), nil
}

type TransactionType string

const (
	TransactionTypeIncome     TransactionType = "income"
	TransactionTypeOutcome    TransactionType = "outcome"
	TransactionTypeTransfer   TransactionType = "transfer"
	TransactionTypeAdjustment TransactionType = "adjustment"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType
	Valid           bool // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type UserState string

const (
	UserStateActive  UserState = "active"
	UserStateBlocked UserState = "blocked"
)

func (e *UserState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserState(s)
	case string:
		*e = UserState(s)
	default:
		return fmt.Errorf("unsupported scan type for UserState: %T", src)
	}
	return nil
}

type NullUserState struct {
	UserState UserState
	Valid     bool // Valid is true if UserState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserState) Scan(value interface{}) error {
	if value == nil {
		ns.UserState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserState), nil
}

type Account struct {
	ID         int64        `db:"id"`
	OfficeID   int64        `db:"office_id"`
	Name       string       `db:"name"`
	Balance    string       `db:"balance"`
	CurrencyID int64        `db:"currency_id"`
	CreatedBy  int64        `db:"created_by"`
	State      AccountState `db:"state"`
	CreatedAt  time.Time    `db:"created_at"`
	DeletedAt  sql.NullTime `db:"deleted_at"`
}

type Currency struct {
	ID        int64         `db:"id"`
	Name      string        `db:"name"`
	ShortName string        `db:"short_name"`
	State     CurrencyState `db:"state"`
	CreatedAt time.Time     `db:"created_at"`
	DeletedAt sql.NullTime  `db:"deleted_at"`
}

type Office struct {
	ID        int64        `db:"id"`
	ParentID  int64        `db:"parent_id"`
	Type      OfficeType   `db:"type"`
	Name      string       `db:"name"`
	State     OfficeState  `db:"state"`
	CreatedAt time.Time    `db:"created_at"`
	DeletedAt sql.NullTime `db:"deleted_at"`
}

type OfficeCurrency struct {
	ID         int64              `db:"id"`
	OfficeID   int64              `db:"office_id"`
	CurrencyID int64              `db:"currency_id"`
	Type       OfficeCurrencyType `db:"type"`
	CreatedAt  time.Time          `db:"created_at"`
	DeletedAt  sql.NullTime       `db:"deleted_at"`
}

type OfficeCurrencyRate struct {
	ID             int64        `db:"id"`
	OfficeID       int64        `db:"office_id"`
	FromCurrencyID int64        `db:"from_currency_id"`
	ToCurrencyID   int64        `db:"to_currency_id"`
	Rate           string       `db:"rate"`
	CreatedAt      time.Time    `db:"created_at"`
	DeletedAt      sql.NullTime `db:"deleted_at"`
}

type Transaction struct {
	ID            int64           `db:"id"`
	OfficeID      int64           `db:"office_id"`
	Type          TransactionType `db:"type"`
	FromAccountID int64           `db:"from_account_id"`
	ToAccountID   sql.NullInt64   `db:"to_account_id"`
	Amount        string          `db:"amount"`
	CurrencyID    int64           `db:"currency_id"`
	CreatedBy     sql.NullInt64   `db:"created_by"`
	CreatedAt     time.Time       `db:"created_at"`
	DeletedAt     sql.NullTime    `db:"deleted_at"`
}

type User struct {
	ID           int64          `db:"id"`
	OfficeID     int64          `db:"office_id"`
	Username     string         `db:"username"`
	PasswordHash string         `db:"password_hash"`
	FirstName    sql.NullString `db:"first_name"`
	LastName     sql.NullString `db:"last_name"`
	MiddleName   sql.NullString `db:"middle_name"`
	Birthdate    sql.NullTime   `db:"birthdate"`
	Email        sql.NullString `db:"email"`
	Phone        sql.NullString `db:"phone"`
	CreatedBy    sql.NullInt64  `db:"created_by"`
	State        UserState      `db:"state"`
	CreatedAt    time.Time      `db:"created_at"`
	DeletedAt    sql.NullTime   `db:"deleted_at"`
}
