// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: office_currency_rate.sql

package db

import (
	"context"
)

const createOfficeCurrencyRate = `-- name: CreateOfficeCurrencyRate :one
insert into office_currency_rate (
  office_id, from_currency_id, to_currency_id, rate
) values (
  $1, $2, $3, $4
)
returning id, office_id, from_currency_id, to_currency_id, rate, created_at, deleted_at
`

type CreateOfficeCurrencyRateParams struct {
	OfficeID       int64  `db:"office_id"`
	FromCurrencyID int64  `db:"from_currency_id"`
	ToCurrencyID   int64  `db:"to_currency_id"`
	Rate           string `db:"rate"`
}

func (q *Queries) CreateOfficeCurrencyRate(ctx context.Context, arg CreateOfficeCurrencyRateParams) (OfficeCurrencyRate, error) {
	row := q.db.QueryRowContext(ctx, createOfficeCurrencyRate,
		arg.OfficeID,
		arg.FromCurrencyID,
		arg.ToCurrencyID,
		arg.Rate,
	)
	var i OfficeCurrencyRate
	err := row.Scan(
		&i.ID,
		&i.OfficeID,
		&i.FromCurrencyID,
		&i.ToCurrencyID,
		&i.Rate,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteOfficeCurrencyRate = `-- name: DeleteOfficeCurrencyRate :exec
update office_currency_rate set deleted_at = now() where id = $1
`

func (q *Queries) DeleteOfficeCurrencyRate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOfficeCurrencyRate, id)
	return err
}

const getOfficeCurrencyRate = `-- name: GetOfficeCurrencyRate :one
select id, office_id, from_currency_id, to_currency_id, rate, created_at, deleted_at from office_currency_rate where id = $1 and deleted_at is null
LIMIT 1
`

func (q *Queries) GetOfficeCurrencyRate(ctx context.Context, id int64) (OfficeCurrencyRate, error) {
	row := q.db.QueryRowContext(ctx, getOfficeCurrencyRate, id)
	var i OfficeCurrencyRate
	err := row.Scan(
		&i.ID,
		&i.OfficeID,
		&i.FromCurrencyID,
		&i.ToCurrencyID,
		&i.Rate,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listOfficeCurrencyRate = `-- name: ListOfficeCurrencyRate :many
select id, office_id, from_currency_id, to_currency_id, rate, created_at, deleted_at from office_currency_rate 
where deleted_at is null 
  and office_id = $1 
  and from_currency_id = $2 
  and to_currency_id = $3
LIMIT $4
OFFSET $5
`

type ListOfficeCurrencyRateParams struct {
	OfficeID       int64 `db:"office_id"`
	FromCurrencyID int64 `db:"from_currency_id"`
	ToCurrencyID   int64 `db:"to_currency_id"`
	Limit          int32 `db:"limit"`
	Offset         int32 `db:"offset"`
}

func (q *Queries) ListOfficeCurrencyRate(ctx context.Context, arg ListOfficeCurrencyRateParams) ([]OfficeCurrencyRate, error) {
	rows, err := q.db.QueryContext(ctx, listOfficeCurrencyRate,
		arg.OfficeID,
		arg.FromCurrencyID,
		arg.ToCurrencyID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OfficeCurrencyRate
	for rows.Next() {
		var i OfficeCurrencyRate
		if err := rows.Scan(
			&i.ID,
			&i.OfficeID,
			&i.FromCurrencyID,
			&i.ToCurrencyID,
			&i.Rate,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOfficeCurrencyRate = `-- name: UpdateOfficeCurrencyRate :one
update office_currency_rate set rate = $2 where id = $1
returning id, office_id, from_currency_id, to_currency_id, rate, created_at, deleted_at
`

type UpdateOfficeCurrencyRateParams struct {
	ID   int64  `db:"id"`
	Rate string `db:"rate"`
}

func (q *Queries) UpdateOfficeCurrencyRate(ctx context.Context, arg UpdateOfficeCurrencyRateParams) (OfficeCurrencyRate, error) {
	row := q.db.QueryRowContext(ctx, updateOfficeCurrencyRate, arg.ID, arg.Rate)
	var i OfficeCurrencyRate
	err := row.Scan(
		&i.ID,
		&i.OfficeID,
		&i.FromCurrencyID,
		&i.ToCurrencyID,
		&i.Rate,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
